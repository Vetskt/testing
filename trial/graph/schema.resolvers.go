package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"myapp/graph/model"
	"myapp/service"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Products, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	return service.CreateUser(ctx, input)
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.TransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: CreateTransaction - createTransaction"))
}

// CreateTransactionDetails is the resolver for the createTransactionDetails field.
func (r *mutationResolver) CreateTransactionDetails(ctx context.Context, input model.TransactionDetailsInput) (*model.TransactionDetails, error) {
	panic(fmt.Errorf("not implemented: CreateTransactionDetails - createTransactionDetails"))
}

// CreateVariant is the resolver for the createVariant field.
func (r *mutationResolver) CreateVariant(ctx context.Context, input model.VariantInput) (*model.Variant, error) {
	panic(fmt.Errorf("not implemented: CreateVariant - createVariant"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return service.GetUser(ctx, id)
}

// GetUserList is the resolver for the getUserList field.
func (r *queryResolver) GetUserList(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserList - getUserList"))
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Products, error) {
	panic(fmt.Errorf("not implemented: GetProduct - getProduct"))
}

// GetProductList is the resolver for the getProductList field.
func (r *queryResolver) GetProductList(ctx context.Context) ([]*model.Products, error) {
	panic(fmt.Errorf("not implemented: GetProductList - getProductList"))
}

// GetTransaction is the resolver for the getTransaction field.
func (r *queryResolver) GetTransaction(ctx context.Context, id string, userID string) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: GetTransaction - getTransaction"))
}

// GetTransactionDetail is the resolver for the getTransactionDetail field.
func (r *queryResolver) GetTransactionDetail(ctx context.Context, id string, productID string, transactionID string) (*model.TransactionDetails, error) {
	panic(fmt.Errorf("not implemented: GetTransactionDetail - getTransactionDetail"))
}

// GetVariant is the resolver for the getVariant field.
func (r *queryResolver) GetVariant(ctx context.Context, productID string) ([]*model.Variant, error) {
	panic(fmt.Errorf("not implemented: GetVariant - getVariant"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	character, ok := r.Resolver.UserStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &character, nil
}
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Products, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}
func (r *queryResolver) Products(ctx context.Context) ([]*model.Products, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}
func (r *queryResolver) Transaction(ctx context.Context, id string, userID string) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transaction - transaction"))
}
func (r *queryResolver) TransactionDetail(ctx context.Context, id string, productID string, transactionID string) (*model.TransactionDetails, error) {
	panic(fmt.Errorf("not implemented: TransactionDetail - transaction_detail"))
}
func (r *queryResolver) Variant(ctx context.Context, productID string) ([]*model.Variant, error) {
	panic(fmt.Errorf("not implemented: Variant - variant"))
}
